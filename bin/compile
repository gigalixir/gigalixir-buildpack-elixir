#!/usr/bin/env bash

set -e

unset GIT_DIR

BUILDPACKS="
https://github.com/gigalixir/gigalixir-buildpack-clean-cache.git
https://github.com/HashNuke/heroku-buildpack-elixir.git
"

# detect phoenix assets folder
if [ -d "$1/assets" ]; then
  # app is using phoenix assets, include the phoenix static asset buildpack
  BUILDPACKS="$BUILDPACKS
https://github.com/gjaldon/heroku-buildpack-phoenix-static.git
"
fi

# detect distillery or mix
distillery_file_url="$1/rel/config.exs"

if [ -f $distillery_file_url ]; then
  # app is using distillery, include the distillery buildpack
  BUILDPACKS="$BUILDPACKS
https://github.com/gigalixir/gigalixir-buildpack-distillery.git
"
else
  # app is using mix, include the mix buildpack for the sole
  # purpose of generating a default Procfile properly for 
  # Gigalixir
  BUILDPACKS="$BUILDPACKS
https://github.com/jesseshieh/gigalixir-buildpack-mix.git
"
fi

for BUILDPACK in $BUILDPACKS; do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
    else
      echo "Couldn't detect any framework for this buildpack. Exiting."
      exit 1
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi

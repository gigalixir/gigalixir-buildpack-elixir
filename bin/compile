#!/usr/bin/env bash

build_pack_dir=$(cd $(dirname $(dirname $0)); pwd)

set -o errexit    # always exit on error
set -o pipefail   # do not ignore exit codes when piping output
unset GIT_DIR

mkdir -p $1 $2 $3 # Ensure dirs are present

build_dir=$(cd $1 && pwd)

mix_file_path="$build_dir/mix.exs"
distillery_file_path="$build_dir/rel/config.exs"
elixir_releases_file_path="$build_dir/config/releases.exs"
elixir_releases_file_path2="$build_dir/config/runtime.exs"

elixir_config_file_path=$build_dir/elixir_buildpack.config

source ${build_pack_dir}/lib/common.sh

load_config
detect_phoenix

BUILDPACKS="
https://github.com/HashNuke/heroku-buildpack-elixir.git
"

if [ ! -f $elixir_config_file_path ]; then
  # TODO: get the latest versions from the api server
  echo "Missing elixir_buildpack.config, using:"
  echo "* Erlang 26.0"
  echo "* Elixir 1.14.5"

  echo -e "elixir_version=1.14.5\nerlang_version=26.0" > $elixir_config_file_path
fi

# detect phoenix assets folder
if $phoenix_detected; then
  # app is using phoenix assets, include the phoenix static asset buildpack
  BUILDPACKS="$BUILDPACKS
https://github.com/gigalixir/gigalixir-buildpack-phoenix-static.git
"
fi

if [ -f $elixir_releases_file_path ] || [ -f $elixir_releases_file_path2 ]; then
  # app is elixir releases, include the releases buildpack
  BUILDPACKS="$BUILDPACKS
https://github.com/gigalixir/gigalixir-buildpack-releases.git
"
elif [ -f $distillery_file_path ]; then
  # app is using distillery, include the distillery buildpack
  BUILDPACKS="$BUILDPACKS
https://github.com/gigalixir/gigalixir-buildpack-distillery.git
"
else
  # app is using mix, include the mix buildpack for the sole
  # purpose of generating a default Procfile properly for 
  # Gigalixir
  BUILDPACKS="$BUILDPACKS
https://github.com/gigalixir/gigalixir-buildpack-mix.git
"
fi

for BUILDPACK in $BUILDPACKS; do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
    else
      echo "Couldn't detect any framework for this buildpack. Exiting."
      exit 1
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi
